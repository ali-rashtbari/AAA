{
	"nodes":[
		{"id":"50394c96efa94b22","type":"text","text":"> [!NOTE]\n> Data Models: \n> - Embedded (de-normalized) data model\n> - Normalized data model\n\n## Considerations while designing Schema\n\n- Design your schema according to user requirements.\n- Combine objects into one document if you will use them together. Otherwise separate them (but make sure there should not be need of joins).\n- Duplicate the data (but limited) because disk space is cheap as compare to compute time.\n- Do joins while write, not on read.\n- Optimize your schema for most frequent use cases.\n- Do complex aggregation in the schema.\n---\n- [ ] Read","x":160,"y":-2360,"width":1100,"height":560,"color":"1"},
		{"id":"dfc1e50287864b85","type":"file","file":"Learning/MongoDB/Beginning.md","x":-2000,"y":-2080,"width":1120,"height":880,"color":"4"},
		{"id":"026489b04b6bf365","type":"text","text":"###### JSON and BSON:\n- JSON: JSON _objects_ are associative containers, wherein a string key is mapped to a _value_ (which can be a number, string, boolean, array, an empty value — null, or even another object)\n\n- BSON: BSON stands for “Binary JSON,” and that's exactly what it was invented to be. A BSON file is a binary representation of the corresponding JSON file. BSON's binary-encoded serialization format encodes type and length information as well, which allows it to be traversed much more quickly compared to JSON.\n\n###### Allowed Types in BSON:\n- **String** − This is the most commonly used datatype to store the data. String in MongoDB must be UTF-8 valid.\n- **Integer** − This type is used to store a numerical value. Integer can be 32 bit or 64 bit depending upon your server.\n- **Boolean** − This type is used to store a boolean (true/ false) value.\n- **Double** − This type is used to store floating point values.\n- **Min/ Max keys** − This type is used to compare a value against the lowest and highest BSON elements.\n- **Arrays** − This type is used to store arrays or list or multiple values into one key.\n- **Timestamp** − ctimestamp. This can be handy for recordin g when a document has been modified or added.\n- **Object** − This datatype is used for embedded documents.\n- **Null** − This type is used to store a Null value.\n- **Symbol** − This datatype is used identically to a string; however, it's generally reserved for languages that use a specific symbol type.\n- **Date** − This datatype is used to store the current date or time in UNIX time format. You can specify your own date time by creating object of Date and passing day, month, year into it.\n- **Object ID** − This datatype is used to store the document’s ID.\n- **Binary data** − This datatype is used to store binary data.\n- **Code** − This datatype is used to store JavaScript code into the document.\n- **Regular expression** − This datatype is used to store regular expression.\n\n---\n- [ ] Read\n","x":-80,"y":-220,"width":1040,"height":800,"color":"#8c2c6d"},
		{"id":"947a4a9ed9e209bd","type":"text","text":"```\n{\n  \"_id\": {\n    \"$binary\": {\n      \"base64\": \"Lv+rIbrqQxqJVHm1phgE9A==\",\n      \"subType\": \"04\"\n    }\n  },\n  \"IsDeleted\": false,\n  \"DateTimeDeleted\": null,\n  \"DateTimeCreated\": {\n    \"$date\": \"2024-11-25T17:32:04.232Z\"\n  },\n  \"DateTimeModified\": null,\n  \"Title\": \"Admin\",\n  \"HasPermission\": true\n}\n```\n\n\n```\n{\n  \"_id\": {\n    \"$binary\": {\n      \"base64\": \"OQje6EQ7SGixKBLoHsTl3A==\",\n      \"subType\": \"04\"\n    }\n  },\n  \"IsDeleted\": false,\n  \"DateTimeDeleted\": null,\n  \"DateTimeCreated\": {\n    \"$date\": \"2024-11-25T21:07:46.426Z\"\n  },\n  \"DateTimeModified\": null,\n  \"FullName\": \"ali rashtbari\",\n  \"PasswordHash\": \"4pkGkkymniyOlf/nZuOihQsajsXcs0g3fQLkdoEox1GclJOXYSRiob61YaZGi4SO\",\n  \"State\": 1,\n  \"Roles\": [\n    \"d989298e-513b-4497-bec4-108a77998d8b\"\n  ],\n  \"Mobile\": \"09917586411\",\n  \"MobileVerificationCode\": null,\n  \"LastSentMobileVerificationCodeDateTime\": {\n    \"$date\": \"2024-11-25T21:07:46.456Z\"\n  },\n  \"OneTimePasswordHash\": null,\n  \"LastSentOneTimePasswordDateTime\": null,\n  \"IsAllowedToChangePassword\": false,\n  \"IsAllowedToChangePasswordUntil\": null,\n  \"DateTimePasswordChanged\": null,\n  \"RefreshToken\": {\n    \"Token\": \"f326f3d35c054abbba85415d70fd8e03\",\n    \"Expires\": {\n      \"$date\": \"2024-11-29T19:40:48.501Z\"\n    },\n    \"DateTimeCreated\": {\n      \"$date\": \"2024-11-29T18:40:48.501Z\"\n    }\n  },\n  \"FailureLoginAttemptsTimes\": [],\n  \"ReferralCode\": null\n}\n```\n\n```\n{\n  \"_id\": {\n    \"$oid\": \"674b5331bdbd85a323c73b15\"\n  },\n  \"Name\": \"ali\"\n}\n```\n\n---\n- [ ] Read\n","x":-4040,"y":-3235,"width":937,"height":1750,"color":"5"},
		{"id":"64271262b323e2d6","type":"text","text":"1. use DATABASE_NAME\n2. db.dropDatabase()\n3. db.createCollection(name, options)\n\n> [!Note] Title\n>options:\n>- capped (Boolean): Capped collection is a fixed size collection that automatically overwrites its oldest entries when it reaches its maximum size. If you specify true, you need to specify size parameter also.\n>- autoIndexId (Boolean): automatically create index on _id field.\n>- size (number): Specifies a maximum size in bytes for a capped collection.\n>- max (number): Specifies the maximum number of documents allowed in the capped collection.\n\n4. db.collection.drop\n\n---\n- [ ] Read\n","x":-2120,"y":-760,"width":1200,"height":520,"color":"#cade35"},
		{"id":"9e3f3200a7cf48b3","type":"text","text":"## Insertion\n\n- ## insertOne()\n- ## insertMany()\n\n## Finding\n\n- ## find()\n- ## pretty()\n- ## findOne()","x":-2440,"y":40,"width":1720,"height":860,"color":"2"},
		{"id":"b4a8991bc2b48609","type":"text","text":" \n| Operation              | Syntax                                          | Example                                                        | RDBMS Equivalent (SQL)                                                             |\n| ---------------------- | ----------------------------------------------- | -------------------------------------------------------------- | ---------------------------------------------------------------------------------- |\n| Equality               | { key : { $eg:value } }                         | db.mycol.find({\"by\":\"tutorials point\"}).pretty()               | where by = 'tutorials point'                                                       |\n| Less Than              | { key : { $lt : value } }                       | db.mycol.find({\"likes\":{$lt:50}}).pretty()                     | where likes < 50                                                                   |\n| Less Than Equals       | { key : { $lte : value } }                      | db.mycol.find({\"likes\":{$lte:50}}).pretty()                    | where likes <= 50                                                                  |\n| Greater Than           | { key : { $gt : value } }                       | db.mycol.find({\"likes\":{$gt:50}}).pretty()                     | where likes > 50                                                                   |\n| Greater Than Equals    | { key : { $gte : value } }                      | db.mycol.find({\"likes\":{$gte:50}}).pretty()                    | where likes >= 50                                                                  |\n| Not Equals             | { key : { $ne : value } }                       | db.mycol.find({\"likes\":{$ne:50}}).pretty()                     | where likes != 50                                                                  |\n| Values in an array     | { key : { $in :[ value1, value2, ……valueN ] } } | db.mycol.find({\"name\":{$in:[\"Raj\", \"Ram\", \"Raghu\"]}}).pretty() | Where name matches any of the value in :[\"Raj\", \"Ram\", \"Raghu\"]                    |\n| Values not in an array | { key : { $nin : value } }                      | db.mycol.find({\"name\":{$nin:[\"Ramu\", \"Raghav\"]}}).pretty()     | Where name values is not in the array :[\"Ramu\", \"Raghav\"] or, doesn’t exist at all |\n\n\n\n ","x":-4480,"y":-600,"width":1420,"height":1184,"color":"#1a511e"}
	],
	"edges":[
		{"id":"85a7c4684ffb4209","fromNode":"dfc1e50287864b85","fromSide":"left","toNode":"947a4a9ed9e209bd","toSide":"right","color":"5","label":"Document's of a Collection"},
		{"id":"c0213efca6d788c6","fromNode":"dfc1e50287864b85","fromSide":"right","toNode":"50394c96efa94b22","toSide":"left","color":"1","label":"Data Modeling"},
		{"id":"f23770a671c7137b","fromNode":"dfc1e50287864b85","fromSide":"bottom","toNode":"64271262b323e2d6","toSide":"top","label":"Interact with DataBase"},
		{"id":"cb63ad566482f170","fromNode":"64271262b323e2d6","fromSide":"right","toNode":"026489b04b6bf365","toSide":"left","label":"Allowed Types In Bson"},
		{"id":"f07f92ad32d53abd","fromNode":"64271262b323e2d6","fromSide":"bottom","toNode":"9e3f3200a7cf48b3","toSide":"top","label":"Interact with Data"},
		{"id":"f7ccc17e2ceb1e90","fromNode":"9e3f3200a7cf48b3","fromSide":"left","toNode":"b4a8991bc2b48609","toSide":"right","label":"How to Query with MQL"}
	]
}